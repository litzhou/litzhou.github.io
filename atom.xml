<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LitZhou</title>
  <icon>https://www.gravatar.com/avatar/4ab086b7b98f4ca0eb265cdf18cc88a8</icon>
  <subtitle>工作要肯拼，生活要欢乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://litzhou.github.io/"/>
  <updated>2017-12-25T08:25:32.924Z</updated>
  <id>http://litzhou.github.io/</id>
  
  <author>
    <name>LitZhou</name>
    <email>litzhou@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA8十大新特性详解</title>
    <link href="http://litzhou.github.io/2017/12/25/JAVA8%E5%8D%81%E5%A4%A7%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://litzhou.github.io/2017/12/25/JAVA8十大新特性详解/</id>
    <published>2017-12-25T08:07:43.000Z</published>
    <updated>2017-12-25T08:25:32.924Z</updated>
    
    <content type="html"><![CDATA[<p>–接口中的方法都是抽象的吗？<br>–NO,今天在翻看jdk的java.util.Comparator接口的时候发现了下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns a comparator that imposes the reverse ordering of this </span></span><br><span class="line"><span class="comment"> * comparator. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a comparator that imposes the reverse ordering of this </span></span><br><span class="line"><span class="comment"> *         comparator. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">reversed</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> Collections.reverseOrder(<span class="keyword">this</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>我擦，什么情况？<br>现在带你领略下Java8的新特性：</p><h2 id="一、接口的默认方法"><a href="#一、接口的默认方法" class="headerlink" title="一、接口的默认方法"></a>一、接口的默认方法</h2><p>Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Formula</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = <span class="keyword">new</span> Formula() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> sqrt(a * <span class="number">100</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">formula.calculate(<span class="number">100</span>);     <span class="comment">// 100.0  </span></span><br><span class="line">formula.sqrt(<span class="number">16</span>);           <span class="comment">// 4.0</span></span><br></pre></td></tr></table></figure><p>文中的formula被实现为一个匿名类的实例，该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。在下一节中，我们将会看到实现单方法接口的更简单的做法。<br>译者注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现，在C++中支持多继承，允许一个子类同时具有多个父类的接口与功能，在其他语言中，让一个类同时具有其他的可复用代码的方法叫做mixin。新的Java 8 的这个特新在编译器实现的角度上来说更加接近Scala的trait。 在C#中也有名为扩展方法的概念，允许给已存在的类型扩展方法，和Java 8的这个在语义上有差别。</p><h2 id="二、Lambda-表达式"><a href="#二、Lambda-表达式" class="headerlink" title="二、Lambda 表达式"></a>二、Lambda 表达式</h2><p>首先看看在老版本的Java中是如何排列字符串的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"peter"</span>, <span class="string">"anna"</span>, <span class="string">"mike"</span>, <span class="string">"xenia"</span>);  </span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> b.compareTo(a);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。<br>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; &#123;  </span><br><span class="line">    <span class="keyword">return</span> b.compareTo(a);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (String a, String b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure></p><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure></p><p>Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还能作出什么更方便的东西来：</p><h2 id="三、函数式接口"><a href="#三、函数式接口" class="headerlink" title="三、函数式接口"></a>三、函数式接口</h2><p>Lambda表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。<br>我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。<br>示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span>  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);  </span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);  </span><br><span class="line">System.out.println(converted);    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><p>需要注意如果@FunctionalInterface如果没有指定，上面的代码也是对的。<br>译者注 将lambda表达式映射到一个单方法的接口上，这种做法在Java 8之前就有别的语言实现，比如Rhino JavaScript解释器，如果一个函数参数接收一个单方法的接口而你传递的是一个function，Rhino 解释器会自动做一个单接口的实例到function的适配器，典型的应用场景有 org.w3c.dom.events.EventTarget 的addEventListener 第二个参数 EventListener。<br>四、方法与构造函数引用<br>前一节中的代码还可以通过静态方法引用来表示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Converter&lt;String, Integer&gt; converter = Integer::valueOf;  </span><br><span class="line">Integer converted = converter.convert(<span class="string">"123"</span>);  </span><br><span class="line">System.out.println(converted);   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><p>Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">converter = something::startsWith;  </span><br><span class="line">String converted = converter.convert(<span class="string">"Java"</span>);  </span><br><span class="line">System.out.println(converted);    <span class="comment">// "J"</span></span><br></pre></td></tr></table></figure></p><p>接下来看看构造函数是如何使用::关键字来引用的，首先我们定义一个包含多个构造函数的简单类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    String firstName;  </span><br><span class="line">    String lastName;  </span><br><span class="line">    Person() &#123;&#125;  </span><br><span class="line">    Person(String firstName, String lastName) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;  </span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们指定一个用来创建Person对象的对象工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PersonFactory&lt;Person&gt; personFactory = Person::<span class="keyword">new</span>;  </span><br><span class="line">Person person = personFactory.create(<span class="string">"Peter"</span>, <span class="string">"Parker"</span>);</span><br></pre></td></tr></table></figure></p><p>我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数。</p><h2 id="五、Lambda-作用域"><a href="#五、Lambda-作用域" class="headerlink" title="五、Lambda 作用域"></a>五、Lambda 作用域</h2><p>在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。</p><h2 id="六、访问局部变量"><a href="#六、访问局部变量" class="headerlink" title="六、访问局部变量"></a>六、访问局部变量</h2><p>我们可以直接在lambda表达式中访问外层的局部变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;  </span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =  </span><br><span class="line">        (from) -&gt; String.valueOf(from + num);  </span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;  </span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =  </span><br><span class="line">        (from) -&gt; String.valueOf(from + num);  </span><br><span class="line">stringConverter.convert(<span class="number">2</span>);     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;  </span><br><span class="line">Converter&lt;Integer, String&gt; stringConverter =  </span><br><span class="line">        (from) -&gt; String.valueOf(from + num);  </span><br><span class="line">num = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><p>在lambda表达式中试图修改num同样是不允许的。</p><h2 id="七、访问对象字段与静态变量"><a href="#七、访问对象字段与静态变量" class="headerlink" title="七、访问对象字段与静态变量"></a>七、访问对象字段与静态变量</h2><p>和本地变量不同的是，lambda内部对于实例的字段以及静态变量是即可读又可写。该行为和匿名对象是一致的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lambda4</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> outerStaticNum;  </span><br><span class="line">    <span class="keyword">int</span> outerNum;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testScopes</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123;  </span><br><span class="line">            outerNum = <span class="number">23</span>;  </span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123;  </span><br><span class="line">            outerStaticNum = <span class="number">72</span>;  </span><br><span class="line">            <span class="keyword">return</span> String.valueOf(from);  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="八、访问接口的默认方法"><a href="#八、访问接口的默认方法" class="headerlink" title="八、访问接口的默认方法"></a>八、访问接口的默认方法</h2><p>还记得第一节中的formula例子么，接口Formula定义了一个默认方法sqrt可以直接被formula的实例包括匿名对象访问到，但是在lambda表达式中这个是不行的。<br>Lambda表达式中是无法访问到默认方法的，以下代码将无法编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Formula formula = (a) -&gt; sqrt( a * <span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><p>Built-in Functional Interfaces<br>JDK 1.8 API包含了很多内建的函数式接口，在老Java中常用到的比如Comparator或者Runnable接口，这些接口都增加了@FunctionalInterface注解以便能用在lambda上。<br>Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p><p>Predicate接口<br>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;  </span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true  </span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false  </span></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;  </span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;  </span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;  </span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure></p><p>Function 接口<br>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; toInteger = Integer::valueOf;  </span><br><span class="line">Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);  </span><br><span class="line">backToString.apply(<span class="string">"123"</span>);     <span class="comment">// "123"</span></span><br></pre></td></tr></table></figure></p><p>Supplier 接口<br>Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;  </span><br><span class="line">personSupplier.get();   <span class="comment">// new Person</span></span><br></pre></td></tr></table></figure></p><p>Consumer 接口<br>Consumer 接口表示执行在单个参数上的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(<span class="string">"Hello, "</span> + p.firstName);  </span><br><span class="line">greeter.accept(<span class="keyword">new</span> Person(<span class="string">"Luke"</span>, <span class="string">"Skywalker"</span>));</span><br></pre></td></tr></table></figure></p><p>Comparator 接口<br>Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);  </span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);  </span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"Alice"</span>, <span class="string">"Wonderland"</span>);  </span><br><span class="line">comparator.compare(p1, p2);             <span class="comment">// &gt; 0  </span></span><br><span class="line">comparator.reversed().compare(p1, p2);  <span class="comment">// &lt; 0</span></span><br></pre></td></tr></table></figure></p><p>Optional 接口<br>Optional 不是函数是接口，这是个用来防止NullPointerException异常的辅助类型，这是下一届中将要用到的重要概念，现在先简单的看看这个接口能干什么：<br>Optional 被定义为一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"bam"</span>);  </span><br><span class="line">optional.isPresent();           <span class="comment">// true  </span></span><br><span class="line">optional.get();                 <span class="comment">// "bam"  </span></span><br><span class="line">optional.orElse(<span class="string">"fallback"</span>);    <span class="comment">// "bam"  </span></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure></p><p>Stream 接口<br>java.util.Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行。<br>首先看看Stream是怎么用，首先创建实例代码的用到的数据List：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">stringCollection.add(<span class="string">"ddd2"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"aaa2"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"bbb1"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"aaa1"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"bbb3"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"ccc"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"bbb2"</span>);  </span><br><span class="line">stringCollection.add(<span class="string">"ddd1"</span>);</span><br></pre></td></tr></table></figure></p><p>Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。下面几节将详细解释常用的Stream操作：<br>Filter 过滤<br>过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stringCollection  </span><br><span class="line">    .stream()  </span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))  </span><br><span class="line">    .forEach(System.out::println);  </span><br><span class="line"><span class="comment">// "aaa2", "aaa1"</span></span><br></pre></td></tr></table></figure></p><p>Sort 排序<br>排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringCollection  </span><br><span class="line">    .stream()  </span><br><span class="line">    .sorted()  </span><br><span class="line">    .filter((s) -&gt; s.startsWith(<span class="string">"a"</span>))  </span><br><span class="line">    .forEach(System.out::println);  </span><br><span class="line"><span class="comment">// "aaa1", "aaa2"</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(stringCollection);  </span><br><span class="line"><span class="comment">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span></span><br></pre></td></tr></table></figure></p><p>Map 映射<br>中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stringCollection  </span><br><span class="line">    .stream()  </span><br><span class="line">    .map(String::toUpperCase)  </span><br><span class="line">    .sorted((a, b) -&gt; b.compareTo(a))  </span><br><span class="line">    .forEach(System.out::println);  </span><br><span class="line"><span class="comment">// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"</span></span><br></pre></td></tr></table></figure></p><p>Match 匹配<br>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> anyStartsWithA =   </span><br><span class="line">    stringCollection  </span><br><span class="line">        .stream()  </span><br><span class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));  </span><br><span class="line">System.out.println(anyStartsWithA);      <span class="comment">// true  </span></span><br><span class="line"><span class="keyword">boolean</span> allStartsWithA =   </span><br><span class="line">    stringCollection  </span><br><span class="line">        .stream()  </span><br><span class="line">        .allMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));  </span><br><span class="line">System.out.println(allStartsWithA);      <span class="comment">// false  </span></span><br><span class="line"><span class="keyword">boolean</span> noneStartsWithZ =   </span><br><span class="line">    stringCollection  </span><br><span class="line">        .stream()  </span><br><span class="line">        .noneMatch((s) -&gt; s.startsWith(<span class="string">"z"</span>));  </span><br><span class="line">System.out.println(noneStartsWithZ);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>Count 计数<br>计数是一个最终操作，返回Stream中元素的个数，返回值类型是long。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> startsWithB =   </span><br><span class="line">    stringCollection  </span><br><span class="line">        .stream()  </span><br><span class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"b"</span>))  </span><br><span class="line">        .count();  </span><br><span class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>Reduce 规约<br>这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规越后的结果是通过Optional接口表示的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; reduced =  </span><br><span class="line">    stringCollection  </span><br><span class="line">        .stream()  </span><br><span class="line">        .sorted()  </span><br><span class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">"#"</span> + s2);  </span><br><span class="line">reduced.ifPresent(System.out::println);  </span><br><span class="line"><span class="comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></span><br></pre></td></tr></table></figure></p><p>并行Streams<br>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。<br>下面的例子展示了是如何通过并行Stream来提升性能：<br>首先我们创建一个没有重复元素的大表：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = <span class="number">1000000</span>;  </span><br><span class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(max);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;  </span><br><span class="line">    UUID uuid = UUID.randomUUID();  </span><br><span class="line">    values.add(uuid.toString());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们计算一下排序这个Stream要耗时多久，<br>串行排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> t0 = System.nanoTime();  </span><br><span class="line"><span class="keyword">long</span> count = values.stream().sorted().count();  </span><br><span class="line">System.out.println(count);  </span><br><span class="line"><span class="keyword">long</span> t1 = System.nanoTime();  </span><br><span class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);  </span><br><span class="line">System.out.println(String.format(<span class="string">"sequential sort took: %d ms"</span>, millis));  </span><br><span class="line"><span class="comment">// 串行耗时: 899 ms</span></span><br></pre></td></tr></table></figure></p><p>并行排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> t0 = System.nanoTime();  </span><br><span class="line"><span class="keyword">long</span> count = values.parallelStream().sorted().count();  </span><br><span class="line">System.out.println(count);  </span><br><span class="line"><span class="keyword">long</span> t1 = System.nanoTime();  </span><br><span class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);  </span><br><span class="line">System.out.println(String.format(<span class="string">"parallel sort took: %d ms"</span>, millis));  </span><br><span class="line"><span class="comment">// 并行排序耗时: 472 ms</span></span><br></pre></td></tr></table></figure></p><p>上面两个代码几乎是一样的，但是并行版的快了50%之多，唯一需要做的改动就是将stream()改为parallelStream()。<br>Map<br>前面提到过，Map类型不支持stream，不过Map提供了一些新的有用的方法来处理一些日常任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    map.putIfAbsent(i, <span class="string">"val"</span> + i);  </span><br><span class="line">&#125;  </span><br><span class="line">map.forEach((id, val) -&gt; System.out.println(val));</span><br></pre></td></tr></table></figure></p><p>以上代码很容易理解， putIfAbsent 不需要我们做额外的存在性检查，而forEach则接收一个Consumer接口来对map里的每一个键值对进行操作。<br>下面的例子展示了map上的其他有用的函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.computeIfPresent(<span class="number">3</span>, (num, val) -&gt; val + num);  </span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33  </span></span><br><span class="line">map.computeIfPresent(<span class="number">9</span>, (num, val) -&gt; <span class="keyword">null</span>);  </span><br><span class="line">map.containsKey(<span class="number">9</span>);     <span class="comment">// false  </span></span><br><span class="line">map.computeIfAbsent(<span class="number">23</span>, num -&gt; <span class="string">"val"</span> + num);  </span><br><span class="line">map.containsKey(<span class="number">23</span>);    <span class="comment">// true  </span></span><br><span class="line">map.computeIfAbsent(<span class="number">3</span>, num -&gt; <span class="string">"bam"</span>);  </span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33</span></span><br></pre></td></tr></table></figure></p><p>接下来展示如何在Map里删除一个键值全都匹配的项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="number">3</span>, <span class="string">"val3"</span>);  </span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// val33  </span></span><br><span class="line">map.remove(<span class="number">3</span>, <span class="string">"val33"</span>);  </span><br><span class="line">map.get(<span class="number">3</span>);             <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p>另外一个有用的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.getOrDefault(<span class="number">42</span>, <span class="string">"not found"</span>);  <span class="comment">// not found</span></span><br></pre></td></tr></table></figure></p><p>对Map的元素做合并也变得很容易了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.merge(<span class="number">9</span>, <span class="string">"val9"</span>, (value, newValue) -&gt; value.concat(newValue));  </span><br><span class="line">map.get(<span class="number">9</span>);             <span class="comment">// val9  </span></span><br><span class="line">map.merge(<span class="number">9</span>, <span class="string">"concat"</span>, (value, newValue) -&gt; value.concat(newValue));  </span><br><span class="line">map.get(<span class="number">9</span>);             <span class="comment">// val9concat</span></span><br></pre></td></tr></table></figure></p><p>Merge做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。</p><h2 id="九、Date-API"><a href="#九、Date-API" class="headerlink" title="九、Date API"></a>九、Date API</h2><p>Java 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样，下面的例子展示了这组新API里最重要的一些部分：</p><p>Clock 时钟<br>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis() 来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lock clock = Clock.systemDefaultZone();  </span><br><span class="line"><span class="keyword">long</span> millis = clock.millis();  </span><br><span class="line">Instant instant = clock.instant();  </span><br><span class="line">Date legacyDate = Date.from(instant);   <span class="comment">// legacy java.util.Date</span></span><br></pre></td></tr></table></figure></p><p>Timezones 时区<br>在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ZoneId.getAvailableZoneIds());  </span><br><span class="line"><span class="comment">// prints all available timezone ids  </span></span><br><span class="line">ZoneId zone1 = ZoneId.of(<span class="string">"Europe/Berlin"</span>);  </span><br><span class="line">ZoneId zone2 = ZoneId.of(<span class="string">"Brazil/East"</span>);  </span><br><span class="line">System.out.println(zone1.getRules());  </span><br><span class="line">System.out.println(zone2.getRules());  </span><br><span class="line"><span class="comment">// ZoneRules[currentStandardOffset=+01:00]  </span></span><br><span class="line"><span class="comment">// ZoneRules[currentStandardOffset=-03:00]</span></span><br></pre></td></tr></table></figure></p><p>LocalTime 本地时间<br>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LocalTime now1 = LocalTime.now(zone1);  </span><br><span class="line">LocalTime now2 = LocalTime.now(zone2);  </span><br><span class="line">System.out.println(now1.isBefore(now2));  <span class="comment">// false  </span></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);  </span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);  </span><br><span class="line">System.out.println(hoursBetween);       <span class="comment">// -3  </span></span><br><span class="line">System.out.println(minutesBetween);     <span class="comment">// -239  </span></span><br><span class="line">LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。</span><br><span class="line">[java] view plain copy</span><br><span class="line">LocalTime late = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);  </span><br><span class="line">System.out.println(late);       <span class="comment">// 23:59:59  </span></span><br><span class="line">DateTimeFormatter germanFormatter =  </span><br><span class="line">    DateTimeFormatter  </span><br><span class="line">        .ofLocalizedTime(FormatStyle.SHORT)  </span><br><span class="line">        .withLocale(Locale.GERMAN);  </span><br><span class="line">LocalTime leetTime = LocalTime.parse(<span class="string">"13:37"</span>, germanFormatter);  </span><br><span class="line">System.out.println(leetTime);   <span class="comment">// 13:37  </span></span><br><span class="line">LocalDate 本地日期</span><br><span class="line">LocalDate 表示了一个确切的日期，比如 <span class="number">2014</span>-<span class="number">03</span>-<span class="number">11</span>。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</span><br><span class="line">[java] view plain copy</span><br><span class="line">LocalDate today = LocalDate.now();  </span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);  </span><br><span class="line">LocalDate yesterday = tomorrow.minusDays(<span class="number">2</span>);  </span><br><span class="line">LocalDate independenceDay = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);  </span><br><span class="line">DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();  </span><br><span class="line">System.out.println(dayOfWeek);    <span class="comment">// FRIDAY</span></span><br></pre></td></tr></table></figure></p><p>从字符串解析一个LocalDate类型和解析LocalTime一样简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter germanFormatter =  </span><br><span class="line">    DateTimeFormatter  </span><br><span class="line">        .ofLocalizedDate(FormatStyle.MEDIUM)  </span><br><span class="line">        .withLocale(Locale.GERMAN);  </span><br><span class="line">LocalDate xmas = LocalDate.parse(<span class="string">"24.12.2014"</span>, germanFormatter);  </span><br><span class="line">System.out.println(xmas);   <span class="comment">// 2014-12-24  </span></span><br><span class="line">LocalDateTime 本地日期时间</span><br><span class="line">LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。</span><br><span class="line">[java] view plain copy</span><br><span class="line">LocalDateTime sylvester = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);  </span><br><span class="line">DayOfWeek dayOfWeek = sylvester.getDayOfWeek();  </span><br><span class="line">System.out.println(dayOfWeek);      <span class="comment">// WEDNESDAY  </span></span><br><span class="line">Month month = sylvester.getMonth();  </span><br><span class="line">System.out.println(month);          <span class="comment">// DECEMBER  </span></span><br><span class="line"><span class="keyword">long</span> minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);  </span><br><span class="line">System.out.println(minuteOfDay);    <span class="comment">// 1439</span></span><br></pre></td></tr></table></figure></p><p>只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的java.util.Date。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Instant instant = sylvester  </span><br><span class="line">        .atZone(ZoneId.systemDefault())  </span><br><span class="line">        .toInstant();  </span><br><span class="line">Date legacyDate = Date.from(instant);  </span><br><span class="line">System.out.println(legacyDate);     <span class="comment">// Wed Dec 31 23:59:59 CET 2014</span></span><br></pre></td></tr></table></figure></p><p>格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter =  </span><br><span class="line">    DateTimeFormatter  </span><br><span class="line">        .ofPattern(<span class="string">"MMM dd, yyyy - HH:mm"</span>);  </span><br><span class="line">LocalDateTime parsed = LocalDateTime.parse(<span class="string">"Nov 03, 2014 - 07:13"</span>, formatter);  </span><br><span class="line">String string = formatter.format(parsed);  </span><br><span class="line">System.out.println(string);     <span class="comment">// Nov 03, 2014 - 07:13</span></span><br></pre></td></tr></table></figure></p><p>和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。<br>关于时间日期格式的详细信息：<a href="http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html" target="_blank" rel="noopener">http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html</a><br>十、Annotation 注解<br>在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。<br>首先定义一个包装类Hints注解用来放置一组具体的Hint注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> Hints &#123;  </span><br><span class="line">    Hint[] value();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Repeatable</span>(Hints.class)  </span><br><span class="line"><span class="meta">@interface</span> Hint &#123;  </span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下@Repeatable即可。<br>例 1: 使用包装类当容器来存多个注解（老方法）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Hints</span>(&#123;<span class="meta">@Hint</span>(<span class="string">"hint1"</span>), <span class="meta">@Hint</span>(<span class="string">"hint2"</span>)&#125;)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>例 2：使用多重注解（新方法）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Hint</span>(<span class="string">"hint1"</span>)  </span><br><span class="line"><span class="meta">@Hint</span>(<span class="string">"hint2"</span>)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hint hint = Person.class.getAnnotation(Hint.class);  </span><br><span class="line">System.out.println(hint);                   <span class="comment">// null  </span></span><br><span class="line">Hints hints1 = Person.class.getAnnotation(Hints.class);  </span><br><span class="line">System.out.println(hints1.value().length);  <span class="comment">// 2  </span></span><br><span class="line">Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);  </span><br><span class="line">System.out.println(hints2.length);          <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>即便我们没有在Person类上定义@Hints注解，我们还是可以通过 getAnnotation(Hints.class) 来获取 @Hints注解，更加方便的方法是使用 getAnnotationsByType 可以直接获取到所有的@Hint注解。<br>另外Java 8的注解还增加到两种新的target上了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE_PARAMETER, ElementType.TYPE_USE&#125;)  </span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>关于Java 8的新特性就写到这了，肯定还有更多的特性等待发掘。JDK 1.8里还有很多很有用的东西，比如Arrays.parallelSort, StampedLock和CompletableFuture等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;–接口中的方法都是抽象的吗？&lt;br&gt;–NO,今天在翻看jdk的java.util.Comparator接口的时候发现了下面这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Returns a comparator that imposes the reverse ordering of this &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * comparator. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a comparator that imposes the reverse ordering of this &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *         comparator. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.8 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Comparator&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Collections.reverseOrder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://litzhou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java高级开发工程师面试考纲</title>
    <link href="http://litzhou.github.io/2017/12/25/Java%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E8%80%83%E7%BA%B2/"/>
    <id>http://litzhou.github.io/2017/12/25/Java高级开发工程师面试考纲/</id>
    <published>2017-12-25T07:12:46.000Z</published>
    <updated>2017-12-25T08:30:26.855Z</updated>
    
    <content type="html"><![CDATA[<p>当前，市面上有《Java XX宝典》类似的图书，而且图书中的内容都着重在讲解Java最为基础的部分，最严重的是，里面有着大量错误的内容，极具误导性。<br>另外，网上也有各种各样的Java面试题，很多也是着重在Java语言基础上。<br>实际上，如果要应聘高级开发工程师职务，仅仅懂得Java的基础知识是远远不够的，还必须懂得常用数据结构、算法、网络、操作系统等知识。<br>因此本文不会讲解具体的技术，笔者综合自己应聘各大公司的经历，整理了一份大公司对Java高级开发工程师职位的考核纲要，希望可以帮助到需要的人。<br><a id="more"></a></p><h2 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1 Java基础"></a>1 Java基础</h2><p>　　1.1 Collection和Map</p><p>　　(1)掌握Collection和Map的继承体系。</p><p>　　(2)掌握ArrayList、LinkedList、Vector、Stack、PriorityQueue、HashSet、LinkedHashSet、TreeSet、HashMap、LinkedHashMap、TreeMap、WeakHashMap、EnumMap、TreeMap、HashTable的特点和实现原理。</p><p>　　(3)掌握CopyOnWriteArrayList、CopyOnWriteArraySet、ConcurrentHashMap的实现原理和适用场景。</p><p>　　1.2 IO</p><p>　　(1)掌握InputStream、OutputStream、Reader、Writer的继承体系。</p><p>　　(2)掌握字节流(FileInputStream、DataInputStream、BufferedInputStream、FileOutputSteam、DataOutputStream、BufferedOutputStream)和字符流(BufferedReader、InputStreamReader、FileReader、BufferedWriter、OutputStreamWriter、PrintWriter、FileWriter)，并熟练运用。</p><p>　　(3)掌握NIO实现原理及使用方法。</p><p>　　1.3 异常</p><p>　　(1)掌握Throwable继承体系。</p><p>　　(2)掌握异常工作原理。</p><p>　　(3)了解常见受检异常(比如FileNotFoundException)、非受检异常(比如NullPointerException)和错误(比如IOError)。</p><p>　　1.4 多线程</p><p>　　(1)掌握Executors可以创建的三种(JAVA8增加了一种，共四种)线程池的特点及适用范围。</p><p>　　(2)掌握多线程同步机制，并熟练运用。</p><p>　　1.5 Socket</p><p>　　(1)掌握Socket通信原理。</p><p>　　(2)熟练使用多线程结合Socket进行编程。</p><h2 id="2-Java虚拟机"><a href="#2-Java虚拟机" class="headerlink" title="2 Java虚拟机"></a>2 Java虚拟机</h2><p>　　2.1 JVM内存区域划分</p><p>　　(1)掌握程序计数器、堆、虚拟机栈、本地方法栈、方法区（JAVA8已移除）、元空间（JAVA8新增）的作用及基本原理。</p><p>　　(2)掌握堆的划分：新生代（Eden、Survivor1、Survivor2）和老年代的作用及工作原理。</p><p>　　(3)掌握JVM内存参数设置及调优。</p><p>　　2.2 类加载</p><p>　　(1)掌握类的加载阶段：加载、链接（验证、准备、解析）、初始化、使用、卸载。</p><p>　　(2)掌握类加载器分类及其应用：启动类加载器、扩展类加载器、应用程序类加载器、自定义加载器。</p><h2 id="3-J2EE"><a href="#3-J2EE" class="headerlink" title="3 J2EE"></a>3 J2EE</h2><p>　　(1) 掌握JSP内置对象、动作及相关特点和工作原理。</p><p>　　(2) 掌握Servlet的特点和工作原理。</p><p>　　(3) 掌握Spring框架的IOC和AOP实现原理（反射和动态代理）。</p><p>　　(4) 至少掌握一个MVC框架（Spring MVC，Struts等）的工作原理，并熟练运用。</p><p>　　(5) 至少掌握一个ORM框架(Hibernate，MyBatis等)的工作原理，并熟练运用。</p><h2 id="4-数据结构与算法"><a href="#4-数据结构与算法" class="headerlink" title="4 数据结构与算法"></a>4 数据结构与算法</h2><p>　　(1)掌握线性表和树的特点并熟练运用。</p><p>　　(2)掌握常用排序和查找算法：插入排序(直接插入排序、希尔排序)、选择排序(直接选择排序、堆排序)、交换排序(冒泡排序、快速排序)、归并排序，顺序查找、二分查找、哈希查找。</p><p>　　(3) 熟练运用常见排序和查找算法思想解决编程问题。</p><p>　　(4)了解几大基本算法：贪心算法、分治策略、动态规划。</p><h2 id="5-计算机网络"><a href="#5-计算机网络" class="headerlink" title="5 计算机网络"></a>5 计算机网络</h2><p>　　(1)掌握网络的分层结构，及每层的功能特点。</p><p>　　(2)掌握TCP/IP的通信原理(三次握手、四次挥手)</p><h2 id="6-数据库"><a href="#6-数据库" class="headerlink" title="6 数据库"></a>6 数据库</h2><p>　　(1)掌握复杂的SQL语句编写。</p><p>　　(2)掌握数据库的优化（SQL层面和表设计层面）。</p><p>　　(3)至少掌握一款数据库产品。</p><p>　　(4)熟悉高并发、大数据情况下的数据库开发。</p><h2 id="7-Web技术"><a href="#7-Web技术" class="headerlink" title="7 Web技术"></a>7 Web技术</h2><p>　　(1)掌握AJAX的工作原理。</p><p>　　(2)至少熟悉一款JS框架(比如JQuery)。</p><h2 id="8-设计模式"><a href="#8-设计模式" class="headerlink" title="8 设计模式"></a>8 设计模式</h2><p>　　(1)熟悉常见的设计模式。</p><p>　　(2)会将设计模式理论应用到实际开发中。</p><h2 id="9-Linux"><a href="#9-Linux" class="headerlink" title="9 Linux"></a>9 Linux</h2><p>　　(1)熟练运用Linux常见命令。</p><p>　　(2)熟悉Linux操作系统基本概念及特点。</p><p>　　(3)熟悉Shell脚本。</p><h2 id="10-操作系统"><a href="#10-操作系统" class="headerlink" title="10 操作系统"></a>10 操作系统</h2><p>　　(1)掌握操作系统的进程管理。</p><p>　　(2)了解操作系统的I/O。</p><h2 id="11-正则表达式"><a href="#11-正则表达式" class="headerlink" title="11 正则表达式"></a>11 正则表达式</h2><p>　　(1)掌握常见正则表达式符号。</p><p>　　(2)熟练运用正则表达式解决实际问题(比如匹配电话号码、邮箱、域名等)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前，市面上有《Java XX宝典》类似的图书，而且图书中的内容都着重在讲解Java最为基础的部分，最严重的是，里面有着大量错误的内容，极具误导性。&lt;br&gt;另外，网上也有各种各样的Java面试题，很多也是着重在Java语言基础上。&lt;br&gt;实际上，如果要应聘高级开发工程师职务，仅仅懂得Java的基础知识是远远不够的，还必须懂得常用数据结构、算法、网络、操作系统等知识。&lt;br&gt;因此本文不会讲解具体的技术，笔者综合自己应聘各大公司的经历，整理了一份大公司对Java高级开发工程师职位的考核纲要，希望可以帮助到需要的人。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://litzhou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库使用笔记</title>
    <link href="http://litzhou.github.io/2017/12/25/MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <id>http://litzhou.github.io/2017/12/25/MYSQL数据库笔记/</id>
    <published>2017-12-25T04:40:23.000Z</published>
    <updated>2017-12-25T07:57:19.169Z</updated>
    
    <content type="html"><![CDATA[<p>常见错误解决方案：<br>1、mysql服务启动不了，进程意外终止 1067<br>   错误显示：<font color="red">can not connect to mysql server on local hosts(1061)</font><br>   解决方法：原来是我傻逼把原来的MySQL数据库给删掉了<br>2、服务已经启动，但是输入密码时 进不去<br>错误显示：<font color="red">ERROR 1045 <28000>:Access denied for user’root’@’locahost’<using password:yes=""></using></28000></font><br>解决方法：<a href="http://blog.sina.com.cn/s/blog_759a5a7c01017dj0.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_759a5a7c01017dj0.html</a><br>3、默认端口号：3306</p><a id="more"></a><p>MySQL语句规范：<br>关键字和函数名称全部大写；<br>数据库名称、表的名称、字段的名称全部小写；<br>SQL语句必须以分好结尾。<br>加中括号表示可以省略</p><p>显示当前版本；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SELECT VERSION();</span><br></pre></td></tr></table></figure></p><p>显示当前时间；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SELECT NOW();</span><br></pre></td></tr></table></figure></p><p>显示当前用户；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SELECT USER();</span><br></pre></td></tr></table></figure></p><p>修改原始密码：<br>打开命令提示符界面, 执行命令: mysqladmin -u root -p password 新密码<br>执行后提示输入旧密码完成密码修改, 当旧密码为空时直接按回车键确认即可。</p><p>开始：<br>//创建数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt;CREATE DATABASE (IF NOT EXISTS) case;</span><br><span class="line">``` </span><br><span class="line">//显示已经存在的数据库；</span><br><span class="line">``` </span><br><span class="line">MySQL&gt;SH0W DATABASES;</span><br></pre></td></tr></table></figure></p><p>//重命名数据库名称<br>先关闭数据库，然后找到文件夹所在目录，更改文件夹名称。<br>//显示某个数据库；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt;SHOW CREATE DATABASE case;</span><br></pre></td></tr></table></figure></p><p>//更改数据库编码为utf8;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt;ALTER DATABASE case CHATACTER SET=utf8;</span><br></pre></td></tr></table></figure></p><p>//删除数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt;DROP DATABASE case;</span><br></pre></td></tr></table></figure></p><p>修改和删除</p><p>修改默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE TB_NAME ALTER 字段名 SET DEFAULT 默认值;</span><br><span class="line">ALTER TABLE TB_NAME ALTER 字段名 DROP DEFAULT ;</span><br></pre></td></tr></table></figure></p><p>修改表名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新名;</span><br></pre></td></tr></table></figure></p><p>修改字段名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段 新字段 新字段数据类型</span><br></pre></td></tr></table></figure></p><p>修改字段数据类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER 表名 MODIFY 属性名 数据类型</span><br></pre></td></tr></table></figure></p><p>增加字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段1 字段1的条件 ［FIRST | AFTER 字段2］;</span><br></pre></td></tr></table></figure></p><p>删除字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段;</span><br></pre></td></tr></table></figure></p><p>修改字段的排列位置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段1 字段1数据类型 FIRST｜AFTER 字段2;</span><br></pre></td></tr></table></figure></p><p>更改表的存储引擎:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ENGINE＝引擎名</span><br></pre></td></tr></table></figure></p><p>添加主键约束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD PRIMARY KEY (外键名)</span><br></pre></td></tr></table></figure></p><p>删除外键约束:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY (外键别名)</span><br></pre></td></tr></table></figure></p><p>修改数据表的名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER  TABLE table_name RENAME TO new_table_name</span><br></pre></td></tr></table></figure></p><p>删除记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from users where id=1；</span><br></pre></td></tr></table></figure></p><p>修改记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 字段=新值 where 条件;</span><br><span class="line">update users set id=1 whers sex=1;</span><br></pre></td></tr></table></figure></p><p>表字段的修改：<br>增加字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER table tb_name ADD column_name 属性 位置;   //增加一个字段，默认为空</span><br><span class="line">alter table user add COLUMN new2 VARCHAR(20) NOT NULL;  //增加一个字段，默认不能为空</span><br></pre></td></tr></table></figure></p><p>删除字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user DROP COLUMN new2; 　//删除一个字段</span><br><span class="line">alter table user DROP column1,column2;  //删除多列</span><br></pre></td></tr></table></figure></p><p>修改一个字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user MODIFY new1 VARCHAR(10); 　//修改一个字段的类型</span><br><span class="line">alter table user CHANGE new1 new4 int;　　//修改一个字段的名称，此时一定要重新指定该字段的类型</span><br></pre></td></tr></table></figure></p><p>第二章：<br>1、数据类型：<br>整型：</p><blockquote><p>TINYINT -2^7-&gt;2^7-1<br>SMALLINT -2^15-&gt;2^15-1<br>MEDIUMINT -2^23-&gt;2^23-1<br>INT -2^31-&gt;2^31-1<br>BIGINT -2^63-&gt;2^63-1</p></blockquote><p>浮点型：</p><blockquote><p>FLOAT[(M,D)] m代表总位数，d代表小数点后位数<br>DOUBLE[(M,D)]</p></blockquote><p>时间日期型：(了解)</p><blockquote><p>YEAR 1个字节<br>TIME 3<br>DATE 3<br>DATETIME 8<br>TIMESTAMP 4</p></blockquote><p>字符型：</p><blockquote><p>CHAR(M) 0&lt;=M&lt;=255<br>VARCHAR(M)<br>TINYTEXT<br>TEXT<br>MEDIUMTEXT<br>LONGTEXT<br>ENUM(‘value1,’value2’…)<br>SET(‘value1’,’value2’,,,)</p></blockquote><p>2、数据表的操作<br>打开数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE test(数据库名称）</span><br></pre></td></tr></table></figure></p><p>创建数据表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (IF NOT EXISTS) table_name&lt;数据表名字&gt;(column_name&lt;根据项目大小确定的列名&gt;data_type&lt;数据类型&gt;,..)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USE TEST;</span><br><span class="line">CREATE TABLE tb1(</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,&lt;unsigned意思是不要负数&gt;</span><br><span class="line">salary FLOAT(8,2) UNSIGNED &lt;float(8,2)的意思是总共有8位数，其中小数点后有2位)&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看数据表列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES FROM test；</span><br></pre></td></tr></table></figure></p><p>查看数据表结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM TB1;</span><br></pre></td></tr></table></figure></p><p>插入记录INSERT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] tb1_name [(col_name,，，)] VALUES(val,,,)</span><br><span class="line">INSERT TB1 (username ,salary) VALUES (&apos;tom&apos;,26,919.3);</span><br></pre></td></tr></table></figure></p><p>插入的也可以是算式比如：33-2 或者函数式：MD5(‘342’)<br>也可以一次插入多条记录，记录间用，分开就行。</p><p>记录查找SELECT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM TB1_NAME</span><br></pre></td></tr></table></figure></p><p>3、空值与非空</p><p>NULL 字段值可以为空  NOT NULL 字段禁止为空</p><p>创建表，设定某些量空与非空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;CREATE TABLE TB2(</span><br><span class="line">&gt;username VARCHAR(20) NOT NULL,</span><br><span class="line">&gt;age TINYINT UNSIGNED NULL,</span><br><span class="line">&gt;);</span><br><span class="line">&gt;INSERT TB2 VALUES(NULL,20);</span><br></pre></td></tr></table></figure></p><p>&lt;将报错说username不可为空&gt;</p><p>4、自动编号（AUTO_INCREMENT)不能用char类型</p><p>自动编号，且需与主键组合使用<br>默认情况下，起始值为1，每次的增量为1；</p><p>5、主键约束(PRIMARY KEY)</p><p>每张数据表只存在一个主键<br>主键保证记录的唯一性<br>主键自动为not null</p><p>多个字段联合主键：<br>PRIMARY KEY(username，age);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;CREATE TABLE TB2(</span><br><span class="line">&gt;id SMALLINT UNSIGNED  PRIMARY KEY AUTO_INCREMENT,</span><br></pre></td></tr></table></figure></p><p>AUTO_INCREMENT(自动递增)必须和PRIMARY KRY一起使用，而PRIMARY KEY则不一定要和AUTO_INCREMENT一起使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;username VARCHAR(20) NOT NULL,</span><br><span class="line">&gt;);</span><br><span class="line">&gt;SHOW COLUMNS FROM TB3;</span><br></pre></td></tr></table></figure></p><p>6、唯一约束(UNIQUE KEY)<br>唯一约束<br>唯一约束可以保证记录的唯一性<br>唯一约束的字段可以为NULL<br>每张数据表可以存在多个唯一约束<br>与主键的区别：一张数据表只能有一个主键，而UNIQUE KEY可以有多个可以NULL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;CREATE TABLE TB4(</span><br><span class="line">&gt;id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,&lt;自动编号字段&gt;</span><br><span class="line">&gt;username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">&gt;age TINYINT UNSIGNED</span><br><span class="line">&gt;);</span><br></pre></td></tr></table></figure></p><p>插入记录：INSERT TB4(username，age) VALUES(‘TOM’,23);<br>当再次写入同样的记录时，将提示错误，因为username用了unique约束。可想而知这个约束在数据表里可以有多个。</p><p>7、默认约束(DEFAULT)</p><p>默认值<br>当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;CREATE TABLE TB5(</span><br><span class="line">&gt;id SAMLLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">&gt;username VARCHAR(20) NOT NULL UNIQUE KEY,</span><br><span class="line">&gt;sex ENUM(&apos;1&apos;,&apos;2&apos;,&apos;3&apos;) DEFAULT &apos;3&apos;</span><br><span class="line">&gt;);</span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT TB5(username)VALUES(&apos;TOM&apos;);</span><br></pre></td></tr></table></figure></p><p>将发现自动给sex赋值3了。</p><p>8、外键约束</p><p>要求：<br>表与表之间的链接<br>父表和子表必须使用相同的储存引擎（InnoDB)，而禁止使用临时表：<br>外键列和参照列必须具有相识的数据类型。其中数字的长度或是否有符号位必须相同；而字符     的长度则可以不同<br>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE provinces(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">pname VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看数据表的引擎：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table provinces;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARU KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(10) NOT NULL,</span><br><span class="line">//添加省份的话可以不用添加字段，只要添加关系表省份的编号就行</span><br><span class="line">pid SMALLINT UNSIGNED, </span><br><span class="line">FOREIGN KEY(pid)REFERENCES provinces(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM provinces\G;</span><br><span class="line">SHOW INDEXES FROM users\G;</span><br></pre></td></tr></table></figure></p><p>外键约束的参数：</p><p>CASCADE：从父表删除或更新且自动删除或更新字表中匹配的行<br>SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL，如果使用该选项，必须保证 子表列没有指定NOT NULL<br>TESTRICT(约束、限制)：拒绝对父表的删除或更新操作<br>NO ACTION：标准的SQL的关键字，在MySQL中RESTRICT相同。</p><p>为自动编号的字段赋值</p><p>可以书写成default 或者null<br>创建表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">password VARCHAR(32) NOT NULL DEFAULT 123,</span><br><span class="line">age TINYINT UNSIGNED NOT NULL,</span><br><span class="line">sex BOOLEAN</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>插入记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT users VALUES(NULL,&apos;Jack&apos;,159357,20,1);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见错误解决方案：&lt;br&gt;1、mysql服务启动不了，进程意外终止 1067&lt;br&gt;   错误显示：&lt;font color=&quot;red&quot;&gt;can not connect to mysql server on local hosts(1061)&lt;/font&gt;&lt;br&gt;   解决方法：原来是我傻逼把原来的MySQL数据库给删掉了&lt;br&gt;2、服务已经启动，但是输入密码时 进不去&lt;br&gt;错误显示：&lt;font color=&quot;red&quot;&gt;ERROR 1045 &lt;28000&gt;:Access denied for user’root’@’locahost’&lt;using password:yes=&quot;&quot;&gt;&lt;/using&gt;&lt;/28000&gt;&lt;/font&gt;&lt;br&gt;解决方法：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_759a5a7c01017dj0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s/blog_759a5a7c01017dj0.html&lt;/a&gt;&lt;br&gt;3、默认端口号：3306&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://litzhou.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="http://litzhou.github.io/2017/12/23/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://litzhou.github.io/2017/12/23/Linux常用命令/</id>
    <published>2017-12-23T06:07:06.000Z</published>
    <updated>2017-12-25T03:56:35.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>ls 显示文件或目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-l   列出文件详细信息l(list)</span><br><span class="line">-a   列出当前目录下所有文件及目录，包括隐藏的a(all)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>mkdir 创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p   创建目录，若无父目录，则创建p(parent)</span><br></pre></td></tr></table></figure><p>cd               切换目录</p><p>touch          创建空文件</p><p>echo            创建带有内容的文件。</p><p>cat              查看文件内容</p><p>cp                拷贝</p><p>mv               移动或重命名</p><p>rm               删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-r   递归删除，可删除子目录及文件</span><br><span class="line">-f   强制删除</span><br></pre></td></tr></table></figure><p>find              在文件系统中搜索某文件</p><p>wc                统计文本中行数、字数、字符数</p><p>grep             在文本文件中查找某个字符串</p><p>rmdir           删除空目录</p><p>tree             树形结构显示目录，需要安装tree包</p><p>pwd              显示当前目录</p><p>ln                  创建链接文件</p><p>more、less  分页显示文本文件内容</p><p>head、tail    显示文件头、尾内容</p><p>ctrl+alt+F1  命令行全屏模式</p><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><p>stat              显示指定文件的详细信息，比ls更详细</p><p>who               显示在线登陆用户</p><p>whoami          显示当前操作用户</p><p>hostname      显示主机名</p><p>uname           显示系统信息</p><p>top                动态显示当前耗费资源最多进程信息</p><p>ps                  显示瞬间进程状态 ps -aux</p><p>du                  查看目录大小 du -h /home带有单位显示目录信息</p><p>df                  查看磁盘大小 df -h 带有单位显示磁盘信息</p><p>ifconfig          查看网络情况</p><p>ping                测试网络连通</p><p>netstat          显示网络状态信息</p><p>man                命令不会用了，找男人  如：man ls</p><p>clear              清屏</p><p>alias               对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit</p><p>kill                 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p><h2 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h2><p>gzip：</p><p>bzip2：</p><p>tar:                打包压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c    归档文件</span><br><span class="line">-x    压缩文件</span><br><span class="line">-z    gzip压缩文件</span><br><span class="line">-j    bzip2压缩文件</span><br><span class="line">-v    显示压缩或解压缩过程 v(view)</span><br><span class="line">-f    使用档名</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc.tar /home/abc              只打包，不压缩</span><br><span class="line">tar -zcvf /home/abc.tar.gz /home/abc        打包，并用gzip压缩</span><br><span class="line">tar -jcvf /home/abc.tar.bz2 /home/abc      打包，并用bzip2压缩</span><br></pre></td></tr></table></figure></p><p>当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。</p><h2 id="关机-重启机器"><a href="#关机-重启机器" class="headerlink" title="关机/重启机器"></a>关机/重启机器</h2><p>shutdown<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-r    关机重启</span><br><span class="line">-h    关机不重启</span><br><span class="line">now   立刻关机</span><br></pre></td></tr></table></figure></p><p>halt               关机</p><p>reboot          重启</p><h2 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a>Linux管道</h2><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;close&quot; /home/* | more       //在home目录下所有文件中查找，包括close的文件，并分页输出。</span><br></pre></td></tr></table></figure></p><h2 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h2><p>dpkg (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。</p><p>比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i tree_1.5.3-1_i386.deb   //安装软件</span><br><span class="line">sudo dpkg -r tree   //卸载软件</span><br></pre></td></tr></table></figure></p><p>注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；<br>APT（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p><p>依然以tree为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tree          安装tree</span><br><span class="line">sudo apt-get remove tree           卸载tree</span><br><span class="line">sudo apt-get update                更新软件</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>将.rpm文件转为.deb文件</p><p>.rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo alien abc.rpm</span><br></pre></td></tr></table></figure></p><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p><p>命令模式下：</p><p>:q                      退出</p><p>:q!                     强制退出</p><p>:wq                   保存并退出</p><p>:set number     显示行号</p><p>:set nonumber  隐藏行号</p><p>/apache            在文档中查找apache 按n跳到下一个，shift+n上一个</p><p>yyp                   复制光标所在行，并粘贴</p><p>h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</p><h2 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h2><p>/etc/passwd    存储用户账号</p><p>/etc/group       存储组账号</p><p>/etc/shadow    存储用户账号的密码</p><p>/etc/gshadow  存储用户组账号的密码</p><p>useradd 用户名</p><p>userdel 用户名</p><p>adduser 用户名</p><p>groupadd 组名</p><p>groupdel 组名</p><p>passwd root     给root设置密码</p><p>su root</p><p>su - root</p><p>/etc/profile     系统环境变量</p><p>bash_profile     用户环境变量</p><p>.bashrc              用户环境变量</p><p>su user              切换用户，加载配置文件.bashrc</p><p>su - user            切换用户，加载配置文件/etc/profile ，加载bash_profile</p><h2 id="文件的用户及用户组"><a href="#文件的用户及用户组" class="headerlink" title="文件的用户及用户组"></a>文件的用户及用户组</h2><p>sudo chown [-R] owner[:group] {File|Directory}</p><p>例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop</p><p>要想切换此文件所属的用户及组。可以使用命令。</p><p>sudo chown root:root jdk-7u21-linux-i586.tar.gz</p><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><p>三种基本权限</p><p>R           读         数值表示为4</p><p>W          写         数值表示为2</p><p>X           可执行  数值表示为1</p><p>如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r–</p><p>-rw-rw-r–一共十个字符，分成四段。</p><p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p><p>第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6</p><p>第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6</p><p>第八九十个字符“r–”表示其他用户权限。              所以用数值表示为2</p><p>所以操作此文件的权限用数值表示为662</p><p>更改权限</p><p>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名</p><p>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+x g+w o+r  filename</span><br></pre></td></tr></table></figure></p><p>上面的例子可以用数值表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 765 filename</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h2&gt;&lt;p&gt;ls 显示文件或目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-l   列出文件详细信息l(list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a   列出当前目录下所有文件及目录，包括隐藏的a(all)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://litzhou.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java技术学习500G视频教程分享</title>
    <link href="http://litzhou.github.io/2017/12/23/500G%E8%A7%86%E9%A2%91%E5%88%86%E4%BA%AB/"/>
    <id>http://litzhou.github.io/2017/12/23/500G视频分享/</id>
    <published>2017-12-23T05:59:17.000Z</published>
    <updated>2017-12-25T08:30:26.651Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript视频教程<br>JPA视频教程<br>马士兵hibernate视频教程<br>JAVA电子书<br>ext4.0视频教程<br>hadoop实战<br>Android视频教程<br>…<br><a id="more"></a></p><table><thead><tr><th>序 号</th><th style="text-align:left">名称</th><th style="text-align:center">地址</th><th style="text-align:right">密码</th></tr></thead><tbody><tr><td>1</td><td style="text-align:left">javascript视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gd57FVH" target="_blank" rel="noopener">http://pan.baidu.com/s/1gd57FVH</a></td><td style="text-align:right">d9ei</td></tr><tr><td>2</td><td style="text-align:left">JPA视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDCx1fj" target="_blank" rel="noopener">http://pan.baidu.com/s/1dDCx1fj</a></td><td style="text-align:right">fwwd</td></tr><tr><td>3</td><td style="text-align:left">马士兵hibernate视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dFILSYH" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFILSYH</a></td><td style="text-align:right">nuwz</td></tr><tr><td>4</td><td style="text-align:left">JAVA电子书</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6xlV9w" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6xlV9w</a></td><td style="text-align:right">347e</td></tr><tr><td>5</td><td style="text-align:left">ext4.0视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntvmfKd" target="_blank" rel="noopener">http://pan.baidu.com/s/1ntvmfKd</a></td><td style="text-align:right">n6fi</td></tr><tr><td>6</td><td style="text-align:left">hadoop实战</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nttQoRJ" target="_blank" rel="noopener">http://pan.baidu.com/s/1nttQoRJ</a></td><td style="text-align:right">r685</td></tr><tr><td>7</td><td style="text-align:left">android视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgpi4TM" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgpi4TM</a></td><td style="text-align:right">tx2e</td></tr><tr><td>8</td><td style="text-align:left">photoshop基础教程视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eRVuN4I" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRVuN4I</a></td><td style="text-align:right">d9yv</td></tr><tr><td>9</td><td style="text-align:left">马士兵struts2视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWGeCg8" target="_blank" rel="noopener">http://pan.baidu.com/s/1qWGeCg8</a></td><td style="text-align:right">m53e</td></tr><tr><td>10</td><td style="text-align:left">junit视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGCTjQA" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGCTjQA</a></td><td style="text-align:right">sncp</td></tr><tr><td>11</td><td style="text-align:left">SSH+Maven+EasyUI</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gfJVC8F" target="_blank" rel="noopener">http://pan.baidu.com/s/1gfJVC8F</a></td><td style="text-align:right">fwmi</td></tr><tr><td>12</td><td style="text-align:left">spring mvc视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eSvBih0" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSvBih0</a></td><td style="text-align:right">5irb</td></tr><tr><td>13</td><td style="text-align:left">ext视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pLAlQRL" target="_blank" rel="noopener">http://pan.baidu.com/s/1pLAlQRL</a></td><td style="text-align:right">j2dk</td></tr><tr><td>14</td><td style="text-align:left">UML视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c1AXZP2" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1AXZP2</a></td><td style="text-align:right">h3ng</td></tr><tr><td>15</td><td style="text-align:left">网页与UI设计从入门到精通视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mg7z1bi" target="_blank" rel="noopener">http://pan.baidu.com/s/1mg7z1bi</a></td><td style="text-align:right">w7zw</td></tr><tr><td>16</td><td style="text-align:left">JSP视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdBDuIR" target="_blank" rel="noopener">http://pan.baidu.com/s/1gdBDuIR</a></td><td style="text-align:right">jv2u</td></tr><tr><td>17</td><td style="text-align:left">java邮件开发视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o61pEgq" target="_blank" rel="noopener">http://pan.baidu.com/s/1o61pEgq</a></td><td style="text-align:right">cjm5</td></tr><tr><td>18</td><td style="text-align:left">EJB视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c05DRe4" target="_blank" rel="noopener">http://pan.baidu.com/s/1c05DRe4</a></td><td style="text-align:right">3jdy</td></tr><tr><td>19</td><td style="text-align:left">编译原理视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgxVZBy" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgxVZBy</a></td><td style="text-align:right">s6vc</td></tr><tr><td>20</td><td style="text-align:left">韩顺平J2SE视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0x6tNy" target="_blank" rel="noopener">http://pan.baidu.com/s/1c0x6tNy</a></td><td style="text-align:right">j86k</td></tr><tr><td>21</td><td style="text-align:left">银行交易系统实现</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJL6yAv" target="_blank" rel="noopener">http://pan.baidu.com/s/1pJL6yAv</a></td><td style="text-align:right">qt3m</td></tr><tr><td>22</td><td style="text-align:left">黑客攻防技术见招拆招视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqEZgCO" target="_blank" rel="noopener">http://pan.baidu.com/s/1hqEZgCO</a></td><td style="text-align:right">1d3f</td></tr><tr><td>23</td><td style="text-align:left">scm_cvs_svn视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/16xQKA" target="_blank" rel="noopener">http://pan.baidu.com/s/16xQKA</a></td><td style="text-align:right">fmb3</td></tr><tr><td>24</td><td style="text-align:left">dreamweaver教学视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3ffpGT" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3ffpGT</a></td><td style="text-align:right">cdy3</td></tr><tr><td>25</td><td style="text-align:left">马士兵j2se</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dFlBRWX" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFlBRWX</a></td><td style="text-align:right">swsf</td></tr><tr><td>26</td><td style="text-align:left">Unix操作系统(哈工大)</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jIx4Oo2" target="_blank" rel="noopener">http://pan.baidu.com/s/1jIx4Oo2</a></td><td style="text-align:right">zgfh</td></tr><tr><td>27</td><td style="text-align:left">Android开发视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn6vR2n" target="_blank" rel="noopener">http://pan.baidu.com/s/1bn6vR2n</a></td><td style="text-align:right">yasa</td></tr><tr><td>28</td><td style="text-align:left">dwr视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bnmdj47" target="_blank" rel="noopener">http://pan.baidu.com/s/1bnmdj47</a></td><td style="text-align:right">98bp</td></tr><tr><td>29</td><td style="text-align:left">jquery视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGARtqe" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGARtqe</a></td><td style="text-align:right">f95u</td></tr><tr><td>30</td><td style="text-align:left">马士兵spring3视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kVCvSXL" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVCvSXL</a></td><td style="text-align:right">ntia</td></tr><tr><td>31</td><td style="text-align:left">java并发教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1yWqEq" target="_blank" rel="noopener">http://pan.baidu.com/s/1yWqEq</a></td><td style="text-align:right">4mxe</td></tr><tr><td>31</td><td style="text-align:left">巴巴网开发实现</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c0sgDSc" target="_blank" rel="noopener">http://pan.baidu.com/s/1c0sgDSc</a></td><td style="text-align:right">w7z9</td></tr><tr><td>32</td><td style="text-align:left">张孝详J2SE高深讲解</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mg1ZLcG" target="_blank" rel="noopener">http://pan.baidu.com/s/1mg1ZLcG</a></td><td style="text-align:right">2dg4</td></tr><tr><td>33</td><td style="text-align:left">Flash动画制作教程视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mirvfq4" target="_blank" rel="noopener">http://pan.baidu.com/s/1mirvfq4</a></td><td style="text-align:right">dig7</td></tr><tr><td>34</td><td style="text-align:left">C语言基础</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDsK8ZB" target="_blank" rel="noopener">http://pan.baidu.com/s/1dDsK8ZB</a></td><td style="text-align:right">b4g6</td></tr><tr><td>35</td><td style="text-align:left">php视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1r4M6q" target="_blank" rel="noopener">http://pan.baidu.com/s/1r4M6q</a></td><td style="text-align:right">w4ak</td></tr><tr><td>36</td><td style="text-align:left">linux视频教程-韩顺平</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qXIHdmO" target="_blank" rel="noopener">http://pan.baidu.com/s/1qXIHdmO</a></td><td style="text-align:right">jk9k</td></tr><tr><td>37</td><td style="text-align:left">spring-mvc视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o7SU7xC" target="_blank" rel="noopener">http://pan.baidu.com/s/1o7SU7xC</a></td><td style="text-align:right">fkcf</td></tr><tr><td>38</td><td style="text-align:left">[吉林大学计算机操作系统视频教程]</td><td style="text-align:center"><a href="http://pan.baidu.com/s/13ad9k" target="_blank" rel="noopener">http://pan.baidu.com/s/13ad9k</a></td><td style="text-align:right">bux4</td></tr><tr><td>39</td><td style="text-align:left">mysql特级课视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o8O1exc" target="_blank" rel="noopener">http://pan.baidu.com/s/1o8O1exc</a></td><td style="text-align:right">8v8b</td></tr><tr><td>40</td><td style="text-align:left">NoSQL视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c10qMbu" target="_blank" rel="noopener">http://pan.baidu.com/s/1c10qMbu</a></td><td style="text-align:right">mht2</td></tr><tr><td>41</td><td style="text-align:left">maven视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dDg9ulb" target="_blank" rel="noopener">http://pan.baidu.com/s/1dDg9ulb</a></td><td style="text-align:right">1f5k</td></tr><tr><td>42</td><td style="text-align:left">JNI视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3tsv45" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3tsv45</a></td><td style="text-align:right">edvc</td></tr><tr><td>43</td><td style="text-align:left">易语言资料与教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c14S1rE" target="_blank" rel="noopener">http://pan.baidu.com/s/1c14S1rE</a></td><td style="text-align:right">ht9u</td></tr><tr><td>44</td><td style="text-align:left">黑客新手综合书藉</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgD4VJq" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgD4VJq</a></td><td style="text-align:right">p4zd</td></tr><tr><td>45</td><td style="text-align:left">tomcat视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1qWxhRmG" target="_blank" rel="noopener">http://pan.baidu.com/s/1qWxhRmG</a></td><td style="text-align:right">kpcs</td></tr><tr><td>46</td><td style="text-align:left">计算机操作系统原理视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ1nEeJ" target="_blank" rel="noopener">http://pan.baidu.com/s/1pJ1nEeJ</a></td><td style="text-align:right">vke7</td></tr><tr><td>47</td><td style="text-align:left">oracle视频教程及OCP认证教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6IQDya" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6IQDya</a></td><td style="text-align:right">mx1n</td></tr><tr><td>48</td><td style="text-align:left">SEO网站优化视频教程-学无忧</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i36jBcp" target="_blank" rel="noopener">http://pan.baidu.com/s/1i36jBcp</a></td><td style="text-align:right">9gae</td></tr><tr><td>49</td><td style="text-align:left">设计模式视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTjKUjX" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTjKUjX</a></td><td style="text-align:right">k7m8</td></tr><tr><td>50</td><td style="text-align:left">jdbc视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTJCIYN" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTJCIYN</a></td><td style="text-align:right">hk8b</td></tr><tr><td>51</td><td style="text-align:left">php从入门到精通</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3rq877" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3rq877</a></td><td style="text-align:right">c792</td></tr><tr><td>52</td><td style="text-align:left">html+CSS教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jHPEVZK" target="_blank" rel="noopener">http://pan.baidu.com/s/1jHPEVZK</a></td><td style="text-align:right">hrgd</td></tr><tr><td>53</td><td style="text-align:left">JAVA编程高级知识</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqEtm5I" target="_blank" rel="noopener">http://pan.baidu.com/s/1hqEtm5I</a></td><td style="text-align:right">yr3x</td></tr><tr><td>54</td><td style="text-align:left">OA+工作流视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgLC9Jy" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgLC9Jy</a></td><td style="text-align:right">7em9</td></tr><tr><td>55</td><td style="text-align:left">webservice视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjIe7Wp" target="_blank" rel="noopener">http://pan.baidu.com/s/1sjIe7Wp</a></td><td style="text-align:right">eka8</td></tr><tr><td>56</td><td style="text-align:left">数据结构视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgElasg" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgElasg</a></td><td style="text-align:right">wtus</td></tr><tr><td>57</td><td style="text-align:left">计算机网络视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgH8NkG" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgH8NkG</a></td><td style="text-align:right">75wj</td></tr><tr><td>58</td><td style="text-align:left">HTML5开发框架PhoneGap实战</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1nvyKEz3" target="_blank" rel="noopener">http://pan.baidu.com/s/1nvyKEz3</a></td><td style="text-align:right">47gn</td></tr><tr><td>59</td><td style="text-align:left">SSM整合视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntEOVwt" target="_blank" rel="noopener">http://pan.baidu.com/s/1ntEOVwt</a></td><td style="text-align:right">7ibg</td></tr><tr><td>60</td><td style="text-align:left">weblogic视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bo8YojX" target="_blank" rel="noopener">http://pan.baidu.com/s/1bo8YojX</a></td><td style="text-align:right">qmy9</td></tr><tr><td>61</td><td style="text-align:left">java网上在线支付实战视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6zTL4e" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6zTL4e</a></td><td style="text-align:right">9kw7</td></tr><tr><td>62</td><td style="text-align:left">23种设计模式视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eQ7BD3k" target="_blank" rel="noopener">http://pan.baidu.com/s/1eQ7BD3k</a></td><td style="text-align:right">bhff</td></tr><tr><td>63</td><td style="text-align:left">lucene视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgH8NlY" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgH8NlY</a></td><td style="text-align:right">5g41</td></tr><tr><td>64</td><td style="text-align:left">xml视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i5kFFbJ" target="_blank" rel="noopener">http://pan.baidu.com/s/1i5kFFbJ</a></td><td style="text-align:right">vn86</td></tr><tr><td>65</td><td style="text-align:left">HTML5入门视频教程【秀野堂】</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sl4ciFb" target="_blank" rel="noopener">http://pan.baidu.com/s/1sl4ciFb</a></td><td style="text-align:right">s46y</td></tr><tr><td>66</td><td style="text-align:left">微普年薪10W版Android教学视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdJKOqn" target="_blank" rel="noopener">http://pan.baidu.com/s/1gdJKOqn</a></td><td style="text-align:right">dp2i</td></tr><tr><td>67</td><td style="text-align:left">ibatis视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6Mo4h8" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6Mo4h8</a></td><td style="text-align:right">jfgv</td></tr><tr><td>68</td><td style="text-align:left">传智播客-韩顺平-php从入门到精通</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1c04XT9A" target="_blank" rel="noopener">http://pan.baidu.com/s/1c04XT9A</a></td><td style="text-align:right">rhuv</td></tr><tr><td>69</td><td style="text-align:left">国内首部Zookeeper从入门到精通</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dD5BOLb" target="_blank" rel="noopener">http://pan.baidu.com/s/1dD5BOLb</a></td><td style="text-align:right">trv7</td></tr><tr><td>70</td><td style="text-align:left">黑马ios</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntneBJr" target="_blank" rel="noopener">http://pan.baidu.com/s/1ntneBJr</a></td><td style="text-align:right">xb3f</td></tr><tr><td>71</td><td style="text-align:left">phonegap HTML5开发视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1boRpe5x" target="_blank" rel="noopener">http://pan.baidu.com/s/1boRpe5x</a></td><td style="text-align:right">6ws3</td></tr><tr><td>72</td><td style="text-align:left">Zookeeper入门到精通</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1ntEOV4d" target="_blank" rel="noopener">http://pan.baidu.com/s/1ntEOV4d</a></td><td style="text-align:right">gtj3</td></tr><tr><td>73</td><td style="text-align:left">java入门</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn7bLWb" target="_blank" rel="noopener">http://pan.baidu.com/s/1bn7bLWb</a></td><td style="text-align:right">r5kz</td></tr><tr><td>74</td><td style="text-align:left">SSH2+activiti5OA管理系统案例视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1gdjnfdL" target="_blank" rel="noopener">http://pan.baidu.com/s/1gdjnfdL</a></td><td style="text-align:right">a54r</td></tr><tr><td>75</td><td style="text-align:left">word转换</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJ5r14R" target="_blank" rel="noopener">http://pan.baidu.com/s/1pJ5r14R</a></td><td style="text-align:right">pbvv</td></tr><tr><td>76</td><td style="text-align:left">桌面UI</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sj470UL" target="_blank" rel="noopener">http://pan.baidu.com/s/1sj470UL</a></td><td style="text-align:right">h32b</td></tr><tr><td>77</td><td style="text-align:left">ajax</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kVLjw8n" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVLjw8n</a></td><td style="text-align:right">38by</td></tr><tr><td>78</td><td style="text-align:left">axure视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kTD7fq3" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTD7fq3</a></td><td style="text-align:right">dk89</td></tr><tr><td>79</td><td style="text-align:left">兄弟连NoSQL视频教程 redis</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pJzlMt1" target="_blank" rel="noopener">http://pan.baidu.com/s/1pJzlMt1</a></td><td style="text-align:right">bjsu</td></tr><tr><td>80</td><td style="text-align:left">Hadoop</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1mgKqEqG" target="_blank" rel="noopener">http://pan.baidu.com/s/1mgKqEqG</a></td><td style="text-align:right">rea5</td></tr><tr><td>81</td><td style="text-align:left">JS视频教程 共150集</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6pe3t4" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6pe3t4</a></td><td style="text-align:right">3cwz</td></tr><tr><td>82</td><td style="text-align:left">activiti 工作流学习专题</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6OWoQI" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6OWoQI</a></td><td style="text-align:right">7f96</td></tr><tr><td>83</td><td style="text-align:left">oa</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6laJEE" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6laJEE</a></td><td style="text-align:right">5scp</td></tr><tr><td>84</td><td style="text-align:left">前段资料</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1eSmNDwI" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSmNDwI</a></td><td style="text-align:right">m9uk</td></tr><tr><td>85</td><td style="text-align:left">简单微信[小项目]</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bnqgNSj" target="_blank" rel="noopener">http://pan.baidu.com/s/1bnqgNSj</a></td><td style="text-align:right">qu4j</td></tr><tr><td>87</td><td style="text-align:left">nutch</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGsAxE2" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGsAxE2</a></td><td style="text-align:right">ckjq</td></tr><tr><td>88</td><td style="text-align:left">anocation</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3HES0d" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3HES0d</a></td><td style="text-align:right">cpym</td></tr><tr><td>89</td><td style="text-align:left">DataGuru视频</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1kThdcMz" target="_blank" rel="noopener">http://pan.baidu.com/s/1kThdcMz</a></td><td style="text-align:right">v3sn</td></tr><tr><td>90</td><td style="text-align:left">Nutch相关框架视频教程（压缩超清）</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1dD2nYoT" target="_blank" rel="noopener">http://pan.baidu.com/s/1dD2nYoT</a></td><td style="text-align:right">9eb6</td></tr><tr><td>91</td><td style="text-align:left">Mars《Android开发视频教程》</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjswhbv" target="_blank" rel="noopener">http://pan.baidu.com/s/1sjswhbv</a></td><td style="text-align:right">wdbi</td></tr><tr><td>92</td><td style="text-align:left">Python</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hqrY4KG" target="_blank" rel="noopener">http://pan.baidu.com/s/1hqrY4KG</a></td><td style="text-align:right">wf77</td></tr><tr><td>93</td><td style="text-align:left">oa activiti 新版</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGMw8E6" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGMw8E6</a></td><td style="text-align:right">5y4h</td></tr><tr><td>94</td><td style="text-align:left">maven视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3g1iD3" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3g1iD3</a></td><td style="text-align:right">1wik</td></tr><tr><td>95</td><td style="text-align:left">linux视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1bn2Yacf" target="_blank" rel="noopener">http://pan.baidu.com/s/1bn2Yacf</a></td><td style="text-align:right">k6df</td></tr><tr><td>96</td><td style="text-align:left">小布老师Git入门</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1i3sCzS5" target="_blank" rel="noopener">http://pan.baidu.com/s/1i3sCzS5</a></td><td style="text-align:right">fqkb</td></tr><tr><td>97</td><td style="text-align:left">Redis</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1hq2hVta" target="_blank" rel="noopener">http://pan.baidu.com/s/1hq2hVta</a></td><td style="text-align:right">t7r5</td></tr><tr><td>98</td><td style="text-align:left">工作流相关资料</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1o6tiskE" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6tiskE</a></td><td style="text-align:right">664u</td></tr><tr><td>99</td><td style="text-align:left">EasyUI入门视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1jGxufxc" target="_blank" rel="noopener">http://pan.baidu.com/s/1jGxufxc</a></td><td style="text-align:right">1s8m</td></tr><tr><td>100</td><td style="text-align:left">MongoDB视频教程</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1pLk30d9" target="_blank" rel="noopener">http://pan.baidu.com/s/1pLk30d9</a></td><td style="text-align:right">6jsc</td></tr><tr><td>101</td><td style="text-align:left">thinkphp</td><td style="text-align:center"><a href="http://pan.baidu.com/s/1sjKg4VF" target="_blank" rel="noopener">http://pan.baidu.com/s/1sjKg4VF</a></td><td style="text-align:right">1vek</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript视频教程&lt;br&gt;JPA视频教程&lt;br&gt;马士兵hibernate视频教程&lt;br&gt;JAVA电子书&lt;br&gt;ext4.0视频教程&lt;br&gt;hadoop实战&lt;br&gt;Android视频教程&lt;br&gt;…&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://litzhou.github.io/tags/Java/"/>
    
      <category term="教程" scheme="http://litzhou.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令总结</title>
    <link href="http://litzhou.github.io/2017/12/05/docker-02/"/>
    <id>http://litzhou.github.io/2017/12/05/docker-02/</id>
    <published>2017-12-05T13:28:48.000Z</published>
    <updated>2017-12-25T03:12:56.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM hub.c.163.com/xbingo/jdk8</span><br><span class="line">ADD ./app-1.0.jar  /app.jar</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><ul><li>FROM 基础镜像</li><li>ADD 拷贝文件到容器目录</li><li>EXPOSE 80 暴露80端口</li><li>CMD 容器内部执行的命令</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jameszhou/app:1.0 .</span><br></pre></td></tr></table></figure><ul><li>docker build 构建Docker镜像的命令;</li><li>-t jameszhou/app:1.0 要构建的镜像的名称,1.0表示镜像的tag,如不指定则使用的默认的tag latest;</li><li>“.”表示Dockefile文件所在的路径，这里为当前路径，故用“.”代替;</li></ul><h2 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>常用两种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name app jameszhou/app:1.0   //后台运行</span><br><span class="line">docker run -it -p 8080:80 --name app jameszhou/app:1.0 //交互式运行</span><br></pre></td></tr></table></figure></p><ul><li>docker run 启动Docker容器命令;</li><li>-d 表示后台运行;</li><li>-it 以交互模式启动;</li><li>-p 8080:80,将容器的80端口映射到主机的8080,注意顺序,”主机端口:容器端口”;</li><li>–name app，给容器起个名字;</li><li>jameszhou/app:1.0,拥有jameszhou/app这个镜像，tage为1.0，不指定tag自动找latest；</li></ul><h2 id="启动容器并挂载目录"><a href="#启动容器并挂载目录" class="headerlink" title="启动容器并挂载目录"></a>启动容器并挂载目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name app -v var/lib/docker/data:/var/lib/docker/data jameszhou/app:1.0</span><br></pre></td></tr></table></figure><ul><li>-v 表示要挂载的目录,格式为“主机目录:容器目录”,前面的是主机目录,后面的是容器目录;</li></ul><h2 id="查看容器列表"><a href="#查看容器列表" class="headerlink" title="查看容器列表"></a>查看容器列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>-a 表示查看所有容器列表（包含停止的容器）,不加表示只查看正在运行的容器</li></ul><h2 id="启动停止的容器"><a href="#启动停止的容器" class="headerlink" title="启动停止的容器"></a>启动停止的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start app</span><br></pre></td></tr></table></figure><ul><li>docker start 启动docker容器命令;</li><li>app 要启动的容器名称，这里可以是容器的Id;</li></ul><h2 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs app</span><br></pre></td></tr></table></figure><h2 id="停止正在运行的容器"><a href="#停止正在运行的容器" class="headerlink" title="停止正在运行的容器"></a>停止正在运行的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop app</span><br></pre></td></tr></table></figure><ul><li>docker stop 停止docker容器命令;</li><li>app 要停止的容器名称，这里可以是容器的Id;</li></ul><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm app   </span><br><span class="line">docker rm -f app</span><br></pre></td></tr></table></figure><ul><li>-f表示强制删除容器，主要用于删除正在运行的容器,不加 “-f” 只能删除停止运行的容器;</li></ul><h2 id="进入容器SHELL"><a href="#进入容器SHELL" class="headerlink" title="进入容器SHELL"></a>进入容器SHELL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it app bash //进入容器的shell</span><br></pre></td></tr></table></figure><h2 id="修改镜像名称"><a href="#修改镜像名称" class="headerlink" title="修改镜像名称"></a>修改镜像名称</h2><p>打新的tag（修改镜像名称）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag imageid name:tag //修改镜像名称</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi fd484f19954f //删除docker镜像</span><br></pre></td></tr></table></figure><h2 id="私有镜像仓库操作"><a href="#私有镜像仓库操作" class="headerlink" title="私有镜像仓库操作"></a>私有镜像仓库操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#docker tag</span><br><span class="line">docker tag 545da14ea 127.0.0.1/registry/app:1.0</span><br><span class="line"></span><br><span class="line">#登录到私有仓库</span><br><span class="line">docker login 127.0.0.1</span><br><span class="line">UserName:admin</span><br><span class="line">Password:123456</span><br><span class="line">Email:111111@qq.com</span><br><span class="line"></span><br><span class="line">#push到私有仓库</span><br><span class="line">dokcer push 127.0.0.1/registry/app:1.0</span><br><span class="line"></span><br><span class="line">#从私有仓库pull一个镜像</span><br><span class="line">docker pull 127.0.0.1/registry/app:1.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;构建Docker镜像&quot;&gt;&lt;a href=&quot;#构建Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;构建Docker镜像&quot;&gt;&lt;/a&gt;构建Docker镜像&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM hub.c.163.com/xbingo/jdk8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD ./app-1.0.jar  /app.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&amp;quot;java&amp;quot;,&amp;quot;-jar&amp;quot;,&amp;quot;/app.jar&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;FROM 基础镜像&lt;/li&gt;
&lt;li&gt;ADD 拷贝文件到容器目录&lt;/li&gt;
&lt;li&gt;EXPOSE 80 暴露80端口&lt;/li&gt;
&lt;li&gt;CMD 容器内部执行的命令&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://litzhou.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker构建SpringBoot镜像</title>
    <link href="http://litzhou.github.io/2017/12/05/docker-01/"/>
    <id>http://litzhou.github.io/2017/12/05/docker-01/</id>
    <published>2017-12-05T13:10:55.000Z</published>
    <updated>2017-12-25T08:38:04.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、构建项目"><a href="#一、构建项目" class="headerlink" title="一、构建项目"></a>一、构建项目</h2><p>使用STS构建springBoot项目</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─example</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      ├─static</span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─com</span><br><span class="line">│              └─example</span><br><span class="line">└─target</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBoot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Docker ."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><p>使用maven打包项目,在target目录下得到springboot-1.0.jar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean pakcage //先清理再进行打包</span><br></pre></td></tr></table></figure></p><h3 id="run项目"><a href="#run项目" class="headerlink" title="run项目"></a>run项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v1.5.1.RELEASE)</span><br><span class="line">......</span><br><span class="line">2017-02-22 13:51:45.408  INFO 1588 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2017-02-22 13:51:45.423  INFO 1588 --- [           main] com.example.Application                  : Started Application in 2.004 seconds (JVM running for 2.622)</span><br><span class="line">2017-02-22 13:51:58.432  INFO 1588 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2017-02-22 13:51:58.433  INFO 1588 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</span><br><span class="line">2017-02-22 13:51:58.452  INFO 1588 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 19 ms</span><br></pre></td></tr></table></figure><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>地址栏输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>, 得到如下结果,项目构建成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Docker .</span><br></pre></td></tr></table></figure></p><h2 id="二、构建Docker镜像"><a href="#二、构建Docker镜像" class="headerlink" title="二、构建Docker镜像"></a>二、构建Docker镜像</h2><p>构建Docker镜像,启动Docker容器<br>上传springboot-1.0.jar到装有Docker服务的linux系统,这里我用的是ubutun14.04<br><img src="http://img.blog.csdn.net/20170222142213286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM3NjAwMjU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""> </p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>开始编写Dockerfile文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure></p><p>Dockerfile的内容，保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM hub.c.163.com/xbingo/jdk8</span><br><span class="line">ADD ./springboot-1.0.jar  /springboot.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;/springboot.jar&quot;]</span><br></pre></td></tr></table></figure><p> ll查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/data/test# ll</span><br><span class="line">total 14004</span><br><span class="line">drwxr-xr-x 2 root root     4096 Feb 21 22:38 ./</span><br><span class="line">drwxr-xr-x 5 root root     4096 Feb 21 22:20 ../</span><br><span class="line">-rw-r--r-- 1 root root      124 Feb 21 22:25 Dockerfile</span><br><span class="line">-rw-r--r-- 1 root root 14326404 Feb 21 22:20 springboot-1.0.jar</span><br><span class="line">root@ubuntu:/data/test#</span><br></pre></td></tr></table></figure></p><p>构建镜像,别忘记后面的”.”,表示Dockerfile的文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/data/test# docker build -t springboot:1.0 .</span><br><span class="line">Sending build context to Docker daemon 14.33 MB</span><br><span class="line">Step 1/4 : FROM hub.c.163.com/xbingo/jdk8</span><br><span class="line"> ---&gt; 3273714c9663</span><br><span class="line">Step 2/4 : ADD ./springboot-1.0.jar /springboot.jar</span><br><span class="line"> ---&gt; 556a8eba0f6a</span><br><span class="line">Removing intermediate container 8d6a88c466e2</span><br><span class="line">Step 3/4 : EXPOSE 8080</span><br><span class="line"> ---&gt; Running in 327fc70b5fa9</span><br><span class="line"> ---&gt; e5e6c6b29983</span><br><span class="line">Removing intermediate container 327fc70b5fa9</span><br><span class="line">Step 4/4 : CMD java -jar /springboot.jar</span><br><span class="line"> ---&gt; Running in 4a9c41547c8c</span><br><span class="line"> ---&gt; c745ff82ccac</span><br><span class="line">Removing intermediate container 4a9c41547c8c</span><br><span class="line">Successfully built c745ff82ccac</span><br><span class="line">root@ubuntu:/data/test#</span><br></pre></td></tr></table></figure><p>查看镜像列表,已生成springboot镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/data/test# docker images</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">springboot                         1.0                 c745ff82ccac        5 minutes ago       182 MB</span><br><span class="line">root@ubuntu:/data/test#</span><br></pre></td></tr></table></figure></p><h3 id="运行Docker容器"><a href="#运行Docker容器" class="headerlink" title="运行Docker容器"></a>运行Docker容器</h3><p>启动容器,并查看运行容器列表<br>启动容器,并查看运行容器列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/data/test# docker run -d -p 8080:8080 --name springboot springboot:1.0</span><br><span class="line">840e8f08bdbbf10f3050c4c7ec38ba7c1ce90378b0f31a3a8cc7a1d2ddf66119</span><br><span class="line">root@ubuntu:/data/test# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                                       NAMES</span><br><span class="line">840e8f08bdbb        springboot:1.0           &quot;java -jar /spring...&quot;   4 seconds ago       Up 3 seconds        0.0.0.0:8080-&gt;8080/tcp                      springboot</span><br></pre></td></tr></table></figure></p><h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><p>打开宿主主机的浏览器:输入<a href="http://localhost:8080,预览效果" target="_blank" rel="noopener">http://localhost:8080,预览效果</a><br><img src="http://img.blog.csdn.net/20170222144541412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM3NjAwMjU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>要想查看Docker容器日志,显示日志结果和第一步的启动日志一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs springboot</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、构建项目&quot;&gt;&lt;a href=&quot;#一、构建项目&quot; class=&quot;headerlink&quot; title=&quot;一、构建项目&quot;&gt;&lt;/a&gt;一、构建项目&lt;/h2&gt;&lt;p&gt;使用STS构建springBoot项目&lt;/p&gt;
&lt;h3 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├─src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  ├─main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │  ├─java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │  │  └─com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │  │      └─example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │  └─resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │      ├─static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  │      └─templates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│  └─test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      └─java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│          └─com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│              └─example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└─target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://litzhou.github.io/tags/Docker/"/>
    
      <category term="SpringBoot" scheme="http://litzhou.github.io/tags/SpringBoot/"/>
    
      <category term="Java" scheme="http://litzhou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>史上最全Html和CSS布局技巧</title>
    <link href="http://litzhou.github.io/2017/12/03/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8Html%E5%92%8CCSS%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/"/>
    <id>http://litzhou.github.io/2017/12/03/史上最全Html和CSS布局技巧/</id>
    <published>2017-12-03T01:41:50.000Z</published>
    <updated>2017-12-25T08:29:36.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p>水平居中的页面布局中最为常见的一种布局形式，多出现于标题，以及内容区域的组织形式，下面介绍四种实现水平居中的方法。<br>注：下面各个实例中实现的是child元素的对齐操作，child元素的父容器是parent元素<br><a id="more"></a></p><h3 id="使用inline-block-和-text-align实现"><a href="#使用inline-block-和-text-align实现" class="headerlink" title="使用inline-block 和 text-align实现"></a>使用inline-block 和 text-align实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br></pre></td></tr></table></figure><p>优点：兼容性好；<br>不足：需要同时设置子元素和父元素</p><h3 id="使用margin-0-auto来实现"><a href="#使用margin-0-auto来实现" class="headerlink" title="使用margin:0 auto来实现"></a>使用margin:0 auto来实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>优点：兼容性好<br>缺点: 需要指定宽度</p><h3 id="使用table实现"><a href="#使用table实现" class="headerlink" title="使用table实现"></a>使用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>优点:只需要对自身进行设置<br>不足:IE6,7需要调整结构</p><h3 id="使用绝对定位实现"><a href="#使用绝对定位实现" class="headerlink" title="使用绝对定位实现"></a>使用绝对定位实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="comment">/*或者实用margin-left的负值为盒子宽度的一半也可以实现，不过这样就必须知道盒子的宽度，但兼容性好*/</span></span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%);&#125;</span><br></pre></td></tr></table></figure><p>不足：兼容性差,IE9及以上可用</p><h3 id="实用flex布局实现"><a href="#实用flex布局实现" class="headerlink" title="实用flex布局实现"></a>实用flex布局实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种方法*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;<span class="attribute">justify-content</span>:center;&#125;</span><br><span class="line"><span class="comment">/*第二种方法*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>缺点：兼容性差，如果进行大面积的布局可能会影响效率</p><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p>我们都知道，每个人都有不同的嗜好，有的人喜欢吃甜食，有的人喜欢吃辣的东西，有的人不喜欢吃芹菜，有的人不喜欢吃羊肉等等。CSS中的有些元素也是这样，他们有的只对牛奶感兴趣，有的只喜欢吃坚果和果冻，而讨厌牛奶。而vertical-align呢，是个比较挑食的家伙，它只喜欢吃果冻，从小吃果冻长大，没有了果冻，它就会闹脾气，对你不理不睬。我称之为“果冻依赖型元素”，又称之为“inline-block依赖型元素”，也就是说,只有一个元素属于inline或是inline-block（table-cell也可以理解为inline-block水平）水平，其身上的vertical-align属性才会起作用。我对css-vertical-align的一些理解与认识<br>在使用vertical-align的时候，由于对齐的基线是用行高的基线作为标记，故需要设置line-height或设置display:table-cell;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种方法*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table-cell;<span class="attribute">vertical-align</span>:middle;<span class="attribute">height</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="comment">/*第二种方法*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">vertical-align</span>:middle;<span class="attribute">line-height</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实用绝对定位"><a href="#实用绝对定位" class="headerlink" title="实用绝对定位"></a>实用绝对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">positon</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(0,-50%);&#125;</span><br></pre></td></tr></table></figure><h3 id="实用flex实现"><a href="#实用flex实现" class="headerlink" title="实用flex实现"></a>实用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;<span class="attribute">align-items</span>:center;&#125;</span><br></pre></td></tr></table></figure><h3 id="水平垂直全部居中"><a href="#水平垂直全部居中" class="headerlink" title="水平垂直全部居中"></a>水平垂直全部居中</h3><p>利用vertical-align,text-align,inline-block实现<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table-cell;<span class="attribute">vertical-align</span>:middle;<span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">display</span>:inline-block;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="利用绝对定位实现"><a href="#利用绝对定位实现" class="headerlink" title="利用绝对定位实现"></a>利用绝对定位实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">50%</span>;<span class="attribute">left</span>:<span class="number">50%</span>;<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现"><a href="#利用flex实现" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;<span class="attribute">justify-content</span>:center;<span class="attribute">align-items</span>:center;&#125;</span><br></pre></td></tr></table></figure><h1 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h1><h2 id="左列定宽，右列自适应"><a href="#左列定宽，右列自适应" class="headerlink" title="左列定宽，右列自适应"></a>左列定宽，右列自适应</h2><p>该布局方式非常常见，适用于定宽的一侧常为导航，自适应的一侧为内容的布局<br>图片描述</p><h3 id="利用float-margin实现"><a href="#利用float-margin实现" class="headerlink" title="利用float+margin实现"></a>利用float+margin实现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">.right&#123;margin-left;margin-left:100px;&#125;</span><br></pre></td></tr></table></figure><p>注：IE6会有3px的bug</p><h3 id="利用float-margin-fix-实现"><a href="#利用float-margin-fix-实现" class="headerlink" title="利用float+margin(fix)实现"></a>利用float+margin(fix)实现</h3><p>图片描述<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-fix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right-fix</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">margin-left</span>:-<span class="number">100px</span>;<span class="attribute">float</span>:right;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用float-overflow实现"><a href="#使用float-overflow实现" class="headerlink" title="使用float+overflow实现"></a>使用float+overflow实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure><p>overflow:hidden，触发bfc模式，浮动无法影响，隔离其他元素，IE6不支持，左侧left设置margin-left当作left与right之间的边距，右侧利用overflow:hidden 进行形成bfc模式<br>如果我们需要将两列设置为等高，可以用下述方法将“背景”设置为等高，其实并不是内容的等高<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">padding-bottom</span>:<span class="number">9999px</span>;<span class="attribute">margin-bottom</span>:-<span class="number">9999px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用table实现-1"><a href="#使用table实现-1" class="headerlink" title="使用table实现"></a>使用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>,<span class="selector-class">.left</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用flex实现"><a href="#使用flex实现" class="headerlink" title="使用flex实现"></a>使用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><p>利用右侧容器的flex:1，均分了剩余的宽度，也实现了同样的效果。而align-items 默认值为stretch，故二者高度相等</p><h2 id="右列定宽，左列自适应"><a href="#右列定宽，左列自适应" class="headerlink" title="右列定宽，左列自适应"></a>右列定宽，左列自适应</h2><h3 id="实用float-margin实现"><a href="#实用float-margin实现" class="headerlink" title="实用float+margin实现"></a>实用float+margin实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">background</span>:red;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">background</span>:green;<span class="attribute">margin-right</span>:-<span class="number">100px</span>;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">float</span>:right;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">background</span>:blue;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用table实现-2"><a href="#使用table实现-2" class="headerlink" title="使用table实现"></a>使用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">display</span>:table-cell;&#125;</span><br></pre></td></tr></table></figure><h2 id="实用flex实现-1"><a href="#实用flex实现-1" class="headerlink" title="实用flex实现"></a>实用flex实现</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="两列定宽，一列自适应"><a href="#两列定宽，一列自适应" class="headerlink" title="两列定宽，一列自适应"></a>两列定宽，一列自适应</h2><p>图片描述<br>基本html结构为父容器为parent,自容器为left,center,right.其中，left,center定宽，right自适应</p><h3 id="利用float-margin实现-1"><a href="#利用float-margin实现-1" class="headerlink" title="利用float+margin实现"></a>利用float+margin实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">margin-left</span>:<span class="number">400px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用float-overflow实现"><a href="#利用float-overflow实现" class="headerlink" title="利用float+overflow实现"></a>利用float+overflow实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left:width:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用table实现"><a href="#利用table实现" class="headerlink" title="利用table实现"></a>利用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现-1"><a href="#利用flex实现-1" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="两侧定宽，中栏自适应"><a href="#两侧定宽，中栏自适应" class="headerlink" title="两侧定宽，中栏自适应"></a>两侧定宽，中栏自适应</h2><p>图片描述</p><h3 id="利用float-margin实现-2"><a href="#利用float-margin实现-2" class="headerlink" title="利用float+margin实现"></a>利用float+margin实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;width：100px;float:left;&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">margin-right</span>:-<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">float</span>:right;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用table实现-1"><a href="#利用table实现-1" class="headerlink" title="利用table实现"></a>利用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.center</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现-2"><a href="#利用flex实现-2" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="一列不定宽，一列自适应"><a href="#一列不定宽，一列自适应" class="headerlink" title="一列不定宽，一列自适应"></a>一列不定宽，一列自适应</h2><p>图片描述</p><h3 id="利用float-overflow实现-1"><a href="#利用float-overflow实现-1" class="headerlink" title="利用float+overflow实现"></a>利用float+overflow实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">float</span>:left;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用table实现-2"><a href="#利用table实现-2" class="headerlink" title="利用table实现"></a>利用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">0.1%</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;<span class="attribute">display</span>:table-cell;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现-3"><a href="#利用flex实现-3" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="多列等分布局"><a href="#多列等分布局" class="headerlink" title="多列等分布局"></a>多列等分布局</h2><p>多列等分布局常出现在内容中，多数为功能的，同阶级内容的并排显示等。<br>图片描述<br>html结构如下所示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="实用float实现"><a href="#实用float实现" class="headerlink" title="实用float实现"></a>实用float实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">margin-left</span>:-<span class="number">20px</span>&#125;<span class="comment">/*假设列之间的间距为20px*/</span></span><br><span class="line"><span class="selector-class">.column</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">25%</span>;<span class="attribute">padding-left</span>:<span class="number">20px</span>;<span class="attribute">box-sizing</span>:border-box;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用table实现-3"><a href="#利用table实现-3" class="headerlink" title="利用table实现"></a>利用table实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent-fix</span>&#123;<span class="attribute">margin-left</span>:-<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;<span class="attribute">display</span>:table-cell;<span class="attribute">padding-left</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现-4"><a href="#利用flex实现-4" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.column</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.column</span>+<span class="selector-class">.column</span>&#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="九宫格布局"><a href="#九宫格布局" class="headerlink" title="九宫格布局"></a>九宫格布局</h2><p>###使用table实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:table;<span class="attribute">table-layout</span>:fixed;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.row</span>&#123;<span class="attribute">display</span>:table-row;&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">display</span>:table-cell;<span class="attribute">width</span>:<span class="number">33.3%</span>;<span class="attribute">height</span>:<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="实用flex实现-2"><a href="#实用flex实现-2" class="headerlink" title="实用flex实现"></a>实用flex实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;<span class="attribute">flex-direction</span>:column;&#125;</span><br><span class="line"><span class="selector-class">.row</span>&#123;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">background</span>:red;&#125;</span><br></pre></td></tr></table></figure><h2 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h2><p>图片描述</p><h3 id="利用绝对定位实现-1"><a href="#利用绝对定位实现-1" class="headerlink" title="利用绝对定位实现"></a>利用绝对定位实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">parent</span>&#123;<span class="attribute">height</span>:<span class="number">100%</span>;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.top</span>&#123;<span class="attribute">position</span>:absolute:top:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">100px</span>;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">50px</span>;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">overflow</span>:auto;<span class="attribute">left</span>:<span class="number">200px</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">top</span>:<span class="number">100px</span>;<span class="attribute">bottom</span>:<span class="number">50px</span>;&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">50px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="利用flex实现-5"><a href="#利用flex实现-5" class="headerlink" title="利用flex实现"></a>利用flex实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;<span class="attribute">flex-direction</span>:column;&#125;</span><br><span class="line"><span class="selector-class">.top</span>&#123;<span class="attribute">height</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.bottom</span>&#123;<span class="attribute">height</span>:<span class="number">50px</span>;&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;<span class="attribute">display</span>:flex;&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;<span class="attribute">overflow</span>:auto;&#125;</span><br></pre></td></tr></table></figure><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="meta标签的实用"><a href="#meta标签的实用" class="headerlink" title="meta标签的实用"></a>meta标签的实用</h3><p>设置布局宽度等于设备宽度，布局viewport等于度量viewport<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>HTML 4和CSS 2目前支持为不同的媒体类型设定专有的样式表, 比如, 一个页面在屏幕上显示时使用无衬线字体,<br>而在打印时则使用衬线字体, screen 和 print 是两种已定义的媒体类型, 媒体查询让样式表有更强的针对性,<br>扩展了媒体类型的功能;媒体查询由媒体类型和一个或多个检测媒体特性的条件表达式组成,<br>媒体查询中可用于检测的媒体特性有width、height和color（等）, 使用媒体查询, 可以在不改变页面内容的情况下,<br>为特定的一些输出设备定制显示效果。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">960px</span>)&#123;....&#125;</span><br></pre></td></tr></table></figure><p><link rel="stylesheet" media="screen and (max-width:960px)" href="xxx.css"><br>作者：mrshi<br>原文地址：<a href="http://segmentfault.com/a/1190000003931851" target="_blank" rel="noopener">http://segmentfault.com/a/1190000003931851</a></p><p>作者： GD_SeHun<br>链接：<a href="http://www.imooc.com/article/2235" target="_blank" rel="noopener">http://www.imooc.com/article/2235</a><br>来源：慕课网</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单列布局&quot;&gt;&lt;a href=&quot;#单列布局&quot; class=&quot;headerlink&quot; title=&quot;单列布局&quot;&gt;&lt;/a&gt;单列布局&lt;/h1&gt;&lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h2&gt;&lt;p&gt;水平居中的页面布局中最为常见的一种布局形式，多出现于标题，以及内容区域的组织形式，下面介绍四种实现水平居中的方法。&lt;br&gt;注：下面各个实例中实现的是child元素的对齐操作，child元素的父容器是parent元素&lt;br&gt;
    
    </summary>
    
    
      <category term="Html" scheme="http://litzhou.github.io/tags/Html/"/>
    
      <category term="CSS" scheme="http://litzhou.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>一首美丽的诗作为博客的开始</title>
    <link href="http://litzhou.github.io/2017/12/01/%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1--%E6%B3%B0%E6%88%88%E5%B0%94/"/>
    <id>http://litzhou.github.io/2017/12/01/生如夏花--泰戈尔/</id>
    <published>2017-12-01T08:34:15.000Z</published>
    <updated>2017-12-25T08:40:11.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《生如夏花》"><a href="#《生如夏花》" class="headerlink" title="《生如夏花》"></a>《生如夏花》</h3><p>生命，一次又一次轻薄过<br>轻狂不知疲倦<br>　　 ——题记<br>    1<br>我听见回声，来自山谷和心间<br>以寂寞的镰刀收割空旷的灵魂<br>不断地重复决绝，又重复幸福<br>终有绿洲摇曳在沙漠<br>我相信自己<br>生来如同璀璨的夏日之花<br>不凋不败，妖冶如火<br>承受心跳的负荷和呼吸的累赘<br>乐此不疲<br><a id="more"></a>　　<br>2<br>我听见音乐，来自月光和胴体<br>辅极端的诱饵捕获飘渺的唯美<br>一生充盈着激烈，又充盈着纯然<br>总有回忆贯穿于世间<br>我相信自己<br>死时如同静美的秋日落叶<br>不盛不乱，姿态如烟<br>即便枯萎也保留丰肌清骨的傲然<br>玄之又玄<br>3<br>我听见爱情，我相信爱情<br>爱情是一潭挣扎的蓝藻<br>如同一阵凄微的风<br>穿过我失血的静脉<br>驻守岁月的信念<br>4<br>我相信一切能够听见<br>甚至预见离散，遇见另一个自己<br>而有些瞬间无法把握<br>任凭东走西顾，逝去的必然不返<br>请看我头置簪花，一路走来一路盛开<br>频频遗漏一些，又深陷风霜雨雪的感动<br>5<br>般若波罗蜜，一声一声<br>生如夏花，死如秋叶<br>还在乎拥有什么<br>（郑振铎译）</p><p>原版：<br>Life, thin and light-off time and time again<br>Frivolous tireless</p><p>one<br>I heard the echo, from the valleys and the heart<br>Open to the lonely soul of sickle harvesting<br>Repeat outrightly, but also repeat the well-being of<br>Eventually swaying in the desert oasis</p><p>I believe I am<br>Born as the bright summer flowers<br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear the load of the cumbersome<br>Bored</p><p>Two<br>I heard the music, from the moon and carcass<br>Auxiliary extreme aestheticism bait to capture misty<br>Filling the intense life, but also filling the pure<br>There are always memories throughout the earth</p><p>I believe I am<br>Died as the quiet beauty of autumn leaves<br>Sheng is not chaos, smoke gesture<br>Even wilt also retained bone proudly Qing Feng muscle<br>Occult</p><p>Three<br>I hear love, I believe in love<br>Love is a pool of struggling blue-green algae<br>As desolate micro-burst of wind<br>Bleeding through my veins<br>Years stationed in the belief</p><p>Four<br>I believe that all can hear<br>Even anticipate discrete, I met the other their own<br>Some can not grasp the moment<br>Left to the East to go West, the dead must not return to nowhere</p><p>See, I wear Zan Flowers on my head, in full bloom along the way all the way<br>Frequently missed some, but also deeply moved by wind, frost, snow or rain</p><p>Five<br>Prajna Paramita, soon as soon as<br>life be beautiful like summer flowers and death like autumn leaves<br>Also care about what has</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;《生如夏花》&quot;&gt;&lt;a href=&quot;#《生如夏花》&quot; class=&quot;headerlink&quot; title=&quot;《生如夏花》&quot;&gt;&lt;/a&gt;《生如夏花》&lt;/h3&gt;&lt;p&gt;生命，一次又一次轻薄过&lt;br&gt;轻狂不知疲倦&lt;br&gt;　　 ——题记&lt;br&gt;    1&lt;br&gt;我听见回声，来自山谷和心间&lt;br&gt;以寂寞的镰刀收割空旷的灵魂&lt;br&gt;不断地重复决绝，又重复幸福&lt;br&gt;终有绿洲摇曳在沙漠&lt;br&gt;我相信自己&lt;br&gt;生来如同璀璨的夏日之花&lt;br&gt;不凋不败，妖冶如火&lt;br&gt;承受心跳的负荷和呼吸的累赘&lt;br&gt;乐此不疲&lt;br&gt;
    
    </summary>
    
    
      <category term="诗" scheme="http://litzhou.github.io/tags/%E8%AF%97/"/>
    
  </entry>
  
</feed>
